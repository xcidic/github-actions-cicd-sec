name: node-actions
# on: [push]
on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
    
env:
  # IS_DEPLOY: false
  # DEPLOY_HOST: '95.111.195.225'
  # DEPLOY_USER: root
  # DEPLOY_PATH: ~/project-cicd-sec-dev
  NODE_VERSION: '18.x'
  # PM2_NAME: 'backend-dev'
  # PM2_ENV: 'PORT: 4000'
  IS_MEND: true
  MEND_PRODUCT: github-actions-cicd-sec
  MEND_PROJECT: github-actions-cicd-sec
  MEND_FOLLOW_POLICY: false
  MEND_IGNORE_RESULT: false
  SONAR_HOST_URL: 'http://sq.xcidic.com'
  ZAP_TARGET: 'https://dev-api.xcidic.com'
  ZAP_ISSUE: false
  ZAP_ISSUE_TITLE: 'ZAP CICD-SEC'
  ACTIONS_STEP_DEBUG: true

jobs:
  build-deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Checkout Action Base
        uses: actions/checkout@v3
        with:
          repository: xcidic/cao-actions-base
          ref: v4.7
          token: ${{ secrets.AGENT_TOKEN }}
          path: ./.github/actions/base
      - name: Setup Base
        uses: ./.github/actions/base
        with:
          node-version: ${{ env.NODE_VERSION }}
          pm2-args: start:prod
          pm2-env: ${{ env.PM2_ENV }}
          pm2-name: ${{ env.PM2_NAME }}
          is-deploy: ${{ env.IS_DEPLOY }}
          deploy-host: ${{ env.DEPLOY_HOST }}
          deploy-host-key: ${{ secrets.DEPLOY_HOST_KEY_DEV }}

          is-mend: ${{ env.IS_MEND }}
          mend-product: ${{ env.MEND_PRODUCT }}
          mend-project: ${{ env.MEND_PROJECT }}
          mend-host-key: ${{ secrets.MEND_HOST_KEY }}
          mend-follow-policy: ${{ env.MEND_FOLLOW_POLICY }}
          mend-ignore-result: ${{ env.MEND_IGNORE_RESULT }}

      - run: yarn install
      - run: yarn test
      - if: ${{ fromJSON(env.IS_DEPLOY) }}
        run: |
          echo -e "${{ secrets.DEV_ENV }}" > .env
          yarn build
          rsync -avzrut --delete-delay --exclude .git . $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
          ssh $DEPLOY_USER@$DEPLOY_HOST 'cd ${{ env.DEPLOY_PATH }} && pm2 startOrReload ecosystem.config.cjs'

  # scan-tool:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Scan Actions
  #       id: scan
  #       uses: './.github/actions/security'
  #       with:
  #         is-sonar: false
  #         sonar-token: ${{ secrets.SONAR_TOKEN }}
  #         sonar-host-url: ${{ env.SONAR_HOST_URL }}
  #     - name: Security Actions Output
  #       if: ${{ always() }}
  #       run: |
  #         echo "Sonar validation error: ${{ steps.security.outputs.sonar-validation }}"
  #         echo "Sonar process error: ${{ steps.security.outputs.sonar-process }}"

  # zap-tool:
  #   runs-on: ubuntu-20.04
  #   needs: build-deploy
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: ZAP Actions
  #       id: zap
  #       uses: './.github/actions/security'
  #       with:
  #         is-zap: 'false'
  #         zap-token: ${{ secrets.GITHUB_TOKEN }}
  #         zap-target: ${{ env.ZAP_TARGET }}
  #         zap-issue: ${{ env.ZAP_ISSUE }}
  #         zap-issue-title: ${{ env.ZAP_ISSUE_TITLE }}
